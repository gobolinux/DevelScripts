#!/bin/bash

### Imports ###################################################################

source ScriptFunctions
Import GoboLinux
Import File
Import Git
Import OptionParser

### Options ###################################################################

scriptDescription="Publish a revision from the git trunk to the revisions tree."
scriptCredits="Copyright (C) 2006 Hisham Muhammad. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<program> [<version>]"
scriptExample="Glibc 2.5"
scriptNotes="If no version is given, all versions in trunk are checked."
Add_Option_Boolean "S" "skip-lint" "Don't run RecipeLint."
Add_Option_Boolean "C" "skip-check-tree" "Don't check Git tree."
Add_Option_Boolean "b" "batch" "Don't ask questions. Generate automatic commit logs such as 'NewVersion' and 'New recipe'."
#Add_Option_Entry "r" "rename" "Rename program to <entry>."
#Add_Option_List "l" "list" "Enter a colon-separated list of..." "foo:bar"
Add_Option_Entry "u" "username"  "User name used for committing changes at git server."
Add_Option_Entry "m" "message" "Enter a commit message." ""
Parse_Options "$@"

# Use this to parse attributions from
# ${goboSettings}/Scripts/INSERT_NAME_HERE.conf or
# ${goboUserSettings}/Scripts/INSERT_NAME_HERE.conf 

Parse_Conf Compile/Compile.conf
Parse_Conf --mandatory CompileGit.conf
[ "$compileGitServerRepository" ] || Die "Please check your CompileGit.conf configuration."

unset batch
Boolean "batch" && batch=yes

username=`Entry username`
[ "$username" ] && username="--username $username" 

### Operation #################################################################

# 0 - publish directly
# 1 - ask for confirmation
# 2 - abort
function lint_recipe() {
   program="$1"
   version="$2"
   
   recipetarball="$goboTemp/$program--$version--recipe.tar.bz2"
   (
      cd "$trunk"
      Verbose tar cjvpf "$recipetarball" "$program/$version"
   )
   RecipeLint "$recipetarball"
   status=$?
   rm "$recipetarball"
   if [ "$status" -eq 1 ]
   then
      Log_Error "RecipeLint reported warnings in $program $version from trunk."
      if ! Ask "Proceed and publish it anyway?"
      then return 2
      fi
      return 0
   elif [ "$status" -eq 2 ]
   then
      Log_Error "RecipeLint reported errors in $program $version from trunk. Not publishing it."
      return 2
   fi
   return 1
}

function has_changes() {
   ( cd "$1"; git status --porcelain | egrep -q "^( M|\?\?)" )
}

function publish_revision() {
   program="$1"
   version="$2"
   
   if ! [ -d "$revisions/$program" ]
   then
      mkdir "$revisions/$program"
   fi
   prefix="$version-r"
   if ls -d "$revisions/$program/$prefix"* &> /dev/null
   then
      latest=`cd "$revisions/$program"; ls -d "$prefix"* | cut -b$[${#prefix}+1]- | sort -nr | head -n1`
      revision=$[latest+1]
      revisiondir="$revisions/$program/$version-r$latest"
      needs_commit=`has_changes "$revisiondir" && echo "yes" || echo "no"`
      if has_changes "$revisiondir" && [ `diff -Nur "$revisiondir" "$trunk/$program/$version" | wc -l` = 0 ]
      then
         Log_Verbose "There are no differences between the trunk and the latest revision (r$latest)."
         Log_Verbose "Will not publish a new revision for $program $version."
         return
      fi
      commitmsg="New revision of $program $version, r$revision."
   else
      revision=1
      commitmsg="First revision of $program $version."
   fi
   
   appdir="$trunk/$program/$version"
   if has_changes "$appdir"
   then
      Log_Normal "Trunk has uncommitted changes for $program $version."
      if [ `ls "$trunk/$program" | wc -l` -eq 1 ]
      then commitdir="$trunk/$program"
      else commitdir="$appdir"
      fi
      if [ ! "$batch" ] && ! Ask "Commit the changes at $commitdir?"
      then return
      fi
      if Is_Entry "message"
      then commitmsg="$(Entry "message")"
      fi
      pushd "$commitdir"
      git add *
      {
         if [ "$batch" ] || [ "$revision" = 1 ] || Is_Entry "message"
         then git commit $username -m "$commitmsg"
         else git commit $username
         fi
      } || Die "Error committing $commitdir"
      popd
   fi
   
   Log_Normal "Publishing revision: $program $version-r$revision"

   unset publishrecipe

   if ! Boolean "skip-lint"
   then
      lint_recipe "$program" "$version"
      case $? in
      0) publishrecipe=yes ;;
      1) : ;;
      2) return ;;
      esac # esac is ridiculous.
   fi

   mkdir -p "$revisions/$program"
   cp -a "$appdir" "$revisions/$program/$version-r$revision"
   
   if [ `ls "$revisions/$program" | wc -l` -eq 1 ]
   then revdir="$revisions/$program"
   else revdir="$revisions/$program/$version-r$revision"
   fi
   
   Log_Normal "Listing $revdir"
   find $revdir
   if [ ! "$publishrecipe" ] && [ ! "$batch" ] && ! Ask "Ok to commit revision?"
   then 
      rm -rf $revdir
      return
   fi
   
   Log_Normal "Committing..."
   Quiet pushd ${compileGitLocalRevisions}
   git add $revdir
   git commit -m "Revision $program $version-r$revision submitted by $compileRecipeAuthor" 
   Quiet pushd ${compileGitLocalRevisions}
}

### Operation #################################################################

program="$(basename $(Arg 1))"
version="$(Arg 2)"

if ! Boolean "skip-check-tree"
then
   Check_Git_Tree || Die "Failed checking git tree."
fi

trunk=`Get_Local_Trunk` || Die "Could not find a valid git trunk."

programintrunk=`ls "$trunk" | grep -i "^$program$"`
[ "$programintrunk" ] || echo "Could not find $program in trunk."
[ `echo "$programintrunk" | wc -l` -eq 1 ] || Die "More than one capitalization for $program found in trunk. Please check."
program="$programintrunk"

revisions=`Get_Local_Revisions`

Quiet pushd $revisions
git pull
Quiet popd

if [ "$version" ]
then
   publish_revision "$program" "$version"
else
   for version in `ls "$trunk/$program"`
   do
      publish_revision "$program" $(basename "$version")
   done
fi
