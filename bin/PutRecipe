#!/bin/bash

### Imports ###################################################################

source ScriptFunctions
Import GoboLinux
Import OptionParser
Import Archive

Parse_Conf Compile/Compile.conf
Parse_Conf --mandatory CompileGit.conf
[ "$compileGitServerRepository" ] || Die "Please check your CompileGit.conf configuration."

### Options ###################################################################

scriptDescription="Put a recipe in the git tree and upload it to the store."
scriptCredits="Copyright (C) 2007 Lucas C. Villa Real. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="[ -m 'message' ] { <recipe dir> | <recipe name> [<recipe version>] }"
scriptExample="firefox"
Add_Option_Entry "m" "message" "Enter a commit message." ""
Add_Option_Boolean "L" "no-lint" "Don't use RecipeLint. (not recommended)" ""
Add_Option_Boolean "" "batch" "Operate without prompting."
Parse_Options "$@"

### Operation #################################################################

if [ -z "$VISUAL" -a -z "$EDITOR" ]
then
   Die "Please set one of VISUAL or EDITOR environment variables before running this script"
fi

entry="$(Arg 1)"
version="$(Arg 2)"

# If it's a URL, fetch it and uncompress it
if [ "$entry" != "${entry#http://*}" ]
then
   wget --header='Accept: application/x-gobo-recipe, application/x-bzip2;q=0.9, */*;q=0.1' -P $goboTemp "$entry"
   version="${entry#*--}"
   version="${version%.tar.bz2}"
   file="$goboTemp/$(basename $entry)"
   entry=`Unpack_Archive $file $compileLocalRecipesDir | cut -d/ -f1 | head -n 1`
   rm -f $file
# Uncompress the file if it's a tarball
elif file $entry | grep -q bzip2\ compressed\ data
then 
   entry=`Unpack_Archive $entry $compileLocalRecipesDir | cut -d/ -f1 | head -n 1`
# Get path from LocalRecipes if only a name is given
elif ! echo $entry | grep -q /
then
   entry=`ls "$compileLocalRecipesDir" | grep -i "^$(Arg 1)$"`
   [ "$entry" ] || Die "Could not find $(Arg 1) in $compileLocalRecipesDir."
   entry="$compileLocalRecipesDir/$entry"
else
   if [ -f "$entry/Recipe" ]
   then
      version=$(basename $entry)
      entry=$(dirname $entry)
   fi
fi

cd $compileLocalRecipesDir
[ -d "$entry" ] || Die "Could not read $entry."

program=`basename $entry`

if ! [ "$version" ]
then
   [ `ls "$entry" | wc -l` -eq 1 ] || Die "Please specify a version for $program."
   version=`ls "$entry"`
fi

[ -r "$entry/$version/Recipe" ] || Die "Could not read Recipe file in $entry/$version."

# Perform some simple cleanups
postinstall="$entry/$version/Resources/PostInstall"
if [ -e "$postinstall" ]
then chmod +x "$postinstall"
fi
for i in `find $entry/$version -name Recipe`
do
  [ -w `dirname "$i"` ] || Die "Need write permissions to the recipe."
  sed -i.bak -e 's,$target/../Settings,$settings_target,g' \
             -e 's,$target/../Variable,$variable_target,g' \
             -e 's,compile_version=[0-9]*-GIT,compile_version=016,g' \
             -e 's,compile_version=[0-9]*-SVN,compile_version=016,g' \
             $i
  rm $i.bak
done

# Removes revisions from submitted recipes
if echo "$version" | grep -q "\-r"
then
   newversion=`echo $version | sed 's,-r[0-9]*$,,'`
   if [ -d "$program/$newversion" ]
   then Die "Attempted to remove revision from $version but $program/$newversion is in the way."
   fi
   mv "$program/$version" "$program/$newversion"
   version=$newversion
fi

# Create a tarball and store it at $goboData/Compile/PackedRecipes
if Is_Entry "no-lint"
then packoptions="--no-lint"
else packoptions=
fi
PackRecipe $packoptions $program $version || exit 1

tarball=${compilePackedRecipesDir}/${program}--${version}--recipe.tar.bz2

version=`basename $tarball | sed 's,\(.*\)--\(.*\)--.*,\2,g'`
# Merge the recipe into the local trunk
ImportRecipe $(Boolean batch && echo "--batch") $tarball || Die "Not publishing a revision."

programlist="$program $programlist"

# Commit the trunk and/or the revision tree.
if Is_Entry "message"
then PublishRevision $(Boolean batch && echo "--batch") -C --message "$(Entry "message")" --skip-lint $program $version || exit 1
else PublishRevision $(Boolean batch && echo "--batch") -C --skip-lint $program $version || exit 1
fi
Log_Normal "Pushing revision..."

cd "$compileGitLocalTrunk"
if git push
then Log_Normal "Submitted $program $version."
else Die "Failed submitting $program $version."
fi
