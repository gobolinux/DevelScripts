#!/bin/bash

### Imports ###################################################################

source ScriptFunctions
Import GoboLinux
Import OptionParser

Parse_Conf Compile/Compile.conf
Parse_Conf CompileSubversion.conf
[ -z "${compileSubversionLocalDir}" ] && Die "You must run 'UpdateSettings develscripts' before trying to run PutRecipe again."

### Options ###################################################################

scriptDescription="Put a recipe in the svn trunk/revision tree and upload it to the store."
scriptCredits="Copyright (C) 2007 Lucas C. Villa Real. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="{ <recipe dir> | <tarball> | <recipe name> [<recipe version>] }"
scriptExample="firefox"
Parse_Options "$@"

### Operation #################################################################

[ "$compileLocalRecipesDir" ] || compileLocalRecipesDir="$goboPrefix/Files/Compile/LocalRecipes"
mkdir -p "$compileLocalRecipesDir"
[ "$compilePackedRecipesDir" ] || compilePackedRecipesDir="$goboPrefix/Files/Compile/PackedRecipes"
mkdir -p "$compilePackedRecipesDir"
[ "$compileSubversionLocalTrunk" ] || compileSubversionLocalTrunk="$goboPrefix/Files/Compile/Subversion/trunk"
mkdir -p "$compileSubversionLocalTrunk"

if [ -z "$SVN_EDITOR" -a -z "$VISUAL" -a -z "$EDITOR" ]
then
   Die "Please set one of SVN_EDITOR, VISUAL or EDITOR environment variables before running this script"
fi

entry="$(Arg 1)"
version="$(Arg 2)"

# Uncompress the file if it's a tarball
if file $entry | grep -q bzip2
then 
   entry=`aunpack $entry --extract-to=$compileLocalRecipesDir | cut -d/ -f1 | head -n 1`
# Get path from LocalRecipes if only a name is given
elif ! echo $entry | grep -q /
then
   entry=`ls "$compileLocalRecipesDir" | grep -i "^$(Arg 1)$"`
   [ "$entry" ] || Die "Could not find $(Arg 1) in $compileLocalRecipesDir."
   entry="$compileLocalRecipesDir/$entry"
else
   if [ -f "$entry/Recipe" ]
   then
      version=$(basename $entry)
      entry=$(dirname $entry)
   fi
fi

[ -d "$entry" ] || Die "Could not read $entry."

program=`basename $entry`

if ! [ "$version" ]
then
   [ `ls "$entry" | wc -l` -eq 1 ] || Die "Please specify a version for $program."
   version=`ls "$entry"`
fi

[ -r "$entry/$version/Recipe" ] || Die "Could not read Recipe file in $entry/$version."

# Perform some simple cleanups
for i in `find $entry/$version -name Recipe`
do
  [ -w `dirname "$i"` ] || Die "Need write permissions to the recipe."
  sed -i.bak -e 's,$target/../Settings,$settings_target,g' \
             -e 's,$target/../Variable,$variable_target,g' \
             $i
  rm $i.bak
done

# Removes revisions from submitted recipes
if echo "$version" | grep -q "\-r"
then
   newversion=`echo $version | sed 's,/\(.*\)-r.*,/\1,g'`
   mv "$version" "$newversion"
   version=$newversion
fi

# Create a tarball and store it at /Files/Compile/PackedRecipes
PackRecipe $program $version || exit 1

tarball=${compilePackedRecipesDir}/${program}--${version}--recipe.tar.bz2

version=`basename $tarball | sed 's,\(.*\)--\(.*\)--.*,\2,g'`
# Merge the recipe into the local trunk
ImportRecipe $tarball || exit 1

Quiet pushd $compileSubversionLocalTrunk/$program/$version
contextlines=`svn diff --non-interactive | wc -l`
Quiet popd
programlist="$program $programlist"
if [ $contextlines -ne 0 ]
then
   # Commit the trunk and/or the revision tree.
   PublishRevision --skip-lint $program $version || exit 1
fi
