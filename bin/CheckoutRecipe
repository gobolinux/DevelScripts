#!/bin/bash

### Imports ###################################################################

source ScriptFunctions
Import GoboLinux
Import File
Import Subversion
Import OptionParser

### Options ###################################################################

scriptDescription="Checkouts a recipe into the local svn tree."
scriptCredits="Copyright (C) 2007 Lucas C Villa Real, Hisham H. Muhammad. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<program>"
scriptExample="Python"
Add_Option_Boolean "b" "batch" "Batch mode, answer 'y' to all questions."
Parse_Options "$@"

Parse_Conf Compile/Compile.conf
Parse_Conf --mandatory CompileSubversion.conf
[ -z "${compileSubversionLocalDir}" ] && Die "You must run 'UpdateSettings develscripts' before trying to run CheckoutRecipe again."

### Cleanup ###################################################################

trap do_cleanup EXIT

function do_cleanup() {
   [ -d "$unpackdir" ] && rm -rf "$unpackdir"
}

### Preliminary recipe tests ##################################################

program="$(Arg 1)"

if [ -d ${compileSubversionLocalDir} ]
then
   Quiet mkdir -p ${compileSubversionLocalTrunk}
   Quiet mkdir -p ${compileSubversionLocalRevisions}
   [ -w ${compileSubversionLocalTrunk} ] || Die "Need write permissions to ${compileSubversionLocalTrunk}."
   [ -w ${compileSubversionLocalRevisions} ] || Die "Need write permissions to ${compileSubversionLocalRevisions}."
else
   [ -w $compileDir ] || Die "Need write permissions to $compileDir."
fi

### Find the recipe in the trunk and revisions trees ##########################

function get_local_dir() {
    if [ "$1" = "trunk" ]
    then Get_Local_Trunk || return 1
    else Get_Local_Revisions || return 1
    fi
}

function do_fetch() {
   local repo="$1"

   unset checkedout
   if ! localdir=`get_local_dir "$repo"`
   then
     unset fetch
     if ! Is_Entry_Set "batch"
     then Ask "You don't seem to have a copy of the svn $repo tree. Fetch it?" && fetch=y
     else fetch=y
     fi
     if [ "$fetch" ]
     then
        Log_Normal "Calling 'svn checkout'."
        mkdir -p ${compileSubversionLocalDir}
        Quiet pushd ${compileSubversionLocalDir}
        svn checkout --non-recursive $compileSubversionServerRepository/$repo || Die "Error doing the svn checkout."
        Quiet popd
        Log_Normal "Checkout finished."
        checkedout=yes
     fi
     if ! localdir=`get_local_dir "$repo"` || [ ! "$checkedout" ]
     then Die "Could not find a valid svn $repo."
     fi
   fi
   
   existingprogram=`ls "$localdir" 2> /dev/null | grep -i "^$program$"`
   if [ ! "$existingprogram" ]
   then
      Log_Normal "Trying to checkout $repo/$program..."
      Quiet pushd $localdir
      svn checkout "$compileSubversionServerRepository/$repo/$program"
      Quiet popd
      checkedout=yes
   else
      Log_Normal "Updating local subversion copy..."
      svn update "$localdir/$program"
   fi
}

do_fetch "trunk"
do_fetch "revisions"
