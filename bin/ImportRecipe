#!/bin/bash

### Imports ###################################################################

source ScriptFunctions
Import GoboLinux
Import File
Import Git
Import OptionParser
Import Archive

### Options ###################################################################

scriptDescription="Add a recipe tarball to the recipes git tree."
scriptCredits="Copyright (C) 2006 Hisham Muhammad. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<tarball>"
scriptExample="Glibc--2.5--recipe.tar.bz2"
#scriptNotes="add notes here if any."
#Add_Option_Boolean "b" "bool" "A boolean option."
Add_Option_Entry "r" "rename" "Rename program to <entry>."
Add_Option_Boolean "" "batch" "Operate without prompting."
#Add_Option_List "l" "list" "Enter a colon-separated list of..." "foo:bar"
Parse_Options "$@"

# Use this to parse attributions from
# ${goboSettings}/Scripts/INSERT_NAME_HERE.conf or
# ${goboUserSettings}/Scripts/INSERT_NAME_HERE.conf 

Parse_Conf Compile/Compile.conf
Parse_Conf --mandatory CompileGit.conf
[ "$compileGitServerRepository" ] || Die "Please check your CompileGit.conf configuration."

### Cleanup ###################################################################

trap do_cleanup EXIT

function do_cleanup() {
   [ -d "$unpackdir" ] && rm -rf "$unpackdir"
}

### Preliminary recipe tests ##################################################

recipetarball="$(Arg 1)"
if ! [ `basename "$recipetarball" recipe.tar.bz2` != "$recipetarball" ]
then Die "Pass a recipe tarball as an argument."
fi

if ! [ -r "$recipetarball" ]
then Die "Could not read $recipetarball"
fi

recipename="`basename "$recipetarball"`"
program="${recipename%%--*}"
version="${recipename#*--}"
rest="${version#*--}"
versionandrevision="${version%%--*}"
version=`String_Version "$versionandrevision"`
revision=`String_Revision "$versionandrevision"`

if [ "$revision" ]
then Die "A recipe submitted to the trunk should not have a revision. Not adding it."
fi

if [ -d ${compileGitLocalDir} ]
then
   Quiet mkdir -p ${compileGitLocalTrunk}
   Quiet mkdir -p ${compileGitLocalRevisions}
   [ -w ${compileGitLocalTrunk} ] || Die "Need write permissions to ${compileGitLocalTrunk}."
   [ -w ${compileGitLocalRevisions} ] || Die "Need write permissions to ${compileGitLocalRevisions}."
else
   [ -w $compileDir ] || Die "Need write permissions to $compileDir."
fi

### Unpack recipe #############################################################

unpackdir=`Temporary_Dir` || Die "Could not create temporary directory."
Verbose Unpack_Archive "$recipetarball" "$unpackdir"

if Is_Entry_Set "rename"
then
   newprogram="`Entry "rename"`"
   mv "$unpackdir/$program" "$unpackdir/$newprogram"
   program="$newprogram"
fi

### Find a basis recipe in trunk ##############################################

Check_Git_Tree || Die "Failed checking git tree."

trunk=`Get_Local_Trunk`

existingprogram=`ls "$trunk" 2> /dev/null | grep -i "^$program$"`
if [ "$existingprogram" ]
then
   [ `echo "$existingprogram" | wc -l` -eq 1 ] || Die "More than one capitalization for $program found in trunk. Please check."

   if [ "$existingprogram" != "$program" ]
   then
      Log_Terse "Capitalization differs in trunk. Changing recipe directory."
      mv "$unpackdir/$program" "$unpackdir/$existingprogram"
      program="$existingprogram"
   fi

   oldrecipedir=$(GuessLatest $trunk/$program/*)
   newrecipedir="$trunk/$program/$version"
   unpackrecipedir="$unpackdir/$program/$version"

   # Test cases that may require the dev's attention
   latestexisting=$(echo $oldrecipedir | sed "s,$trunk/$program/,,g")

   if [ "$latestexisting" = "$version" ]
   then
      diff -Naur "$oldrecipedir" "$unpackrecipedir" >& /dev/null
      if [ $? = 0 ]
      then
         Log_Terse "Version in trunk matches exactly with the given recipe"
         exit 1
      fi
      Log_Terse "Latest version in trunk is already $version."
      Boolean batch || Ask_Continue "Will display differences."
      diff -Naur --exclude=".git" "$oldrecipedir" "$unpackrecipedir" | Color_Output diff
      Boolean batch || Ask_Continue "Proceed and overwrite with given recipe?"
   elif [ $(GuessLatest $latestexisting $version) != $version ]
   then
      Boolean batch || Ask_Continue "Latest version in trunk ($latestexisting) seems more recent than recipe ($version). Add $version to trunk anyway?"
   fi

   mkdir -p "$newrecipedir"
   cp -af "$unpackrecipedir"/* "$newrecipedir"

   Quiet pushd "${compileGitLocalTrunk}"
   git add "$newrecipedir"

   if [ $latestexisting != $version ] && { Boolean batch || Ask "View differences in new version?" ; }
   then
      if Boolean batch
      then diff -Naur "$oldrecipedir" "$unpackrecipedir" | Color_Output diff
      else diff -Naur "$oldrecipedir" "$unpackrecipedir" | Color_Output diff | less -R
      fi
   fi
   Quiet popd
else
   Log_Terse "No existing versions for $program were found."
   Boolean batch || Ask_Continue "Add new program $program to the recipes trunk?"
   cp -af "$unpackdir/$program" "$trunk"
   Quiet pushd "${compileGitLocalTrunk}"
   git add "$trunk/$program"
   if Boolean batch || Ask "View contents of new entry in trunk?"
   then find "$trunk/$program"
   fi
   Quiet popd
fi

Quiet pushd ${compileGitLocalTrunk}
# Exhibit a status summary for copy-n-paste convenience
Log_Normal "Summary of addition:"
git status
git commit -m "$program $version submitted by $compileRecipeAuthor"
Quiet popd
   
exit 0
