#!/bin/sh

### Imports ###################################################################

source ScriptFunctions
Import GoboLinux
Import File
Import Subversion
Import OptionParser

### Options ###################################################################

scriptDescription="Add a recipe tarball to the recipes svn trunk."
scriptCredits="Copyright (C) 2006 Hisham Muhammad. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<tarball>"
scriptExample="Glibc--2.5--recipe.tar.bz2"
#scriptNotes="add notes here if any."
#Add_Option_Boolean "b" "bool" "A boolean option."
Add_Option_Entry "r" "rename" "Rename program to <entry>."
#Add_Option_List "l" "list" "Enter a colon-separated list of..." "foo:bar"
Parse_Options "$@"

# Use this to parse attributions from
# ${goboSettings}/Scripts/INSERT_NAME_HERE.conf or
# ${goboUserSettings}/Scripts/INSERT_NAME_HERE.conf 

Parse_Conf CompileSubversion.conf
Parse_Conf $goboSettings/Compile/Compile.conf

### Cleanup ###################################################################

trap do_cleanup EXIT

function do_cleanup() {
   [ -d "$unpackdir" ] && rm -rf "$unpackdir"
}

### Preliminary recipe tests ##################################################

recipetarball="$(Arg 1)"
if ! [ `basename "$recipetarball" recipe.tar.bz2` != "$recipetarball" ]
then Die "Pass a recipe tarball as an argument."
fi

if ! [ -r "$recipetarball" ]
then Die "Could not read $recipetarball"
fi

recipename="`basename "$recipetarball"`"
program="${recipename%%--*}"
version="${recipename#*--}"
rest="${version#*--}"
versionandrevision="${version%%--*}"
version=`String_Version "$versionandrevision"`
revision=`String_Revision "$versionandrevision"`

if [ "$revision" ]
then Die "A recipe submitted to the trunk should not have a revision. Not adding it."
fi

### Unpack recipe #############################################################

unpackdir=`Temporary_Dir` || Die "Could not create temporary directory."
Verbose aunpack --extract-to="$unpackdir" "$recipetarball"

if Is_Entry_Set "rename"
then
   newprogram="`Entry "rename"`"
   mv "$unpackdir/$program" "$unpackdir/$newprogram"
   program="$newprogram"
fi

### Find a basis recipe in trunk ##############################################

unset checkedout
if ! trunk=`Get_Local_Trunk`
then 
   if Ask "You don't seem to have a copy of the svn trunk/revisions tree. Fetch it?"
   then
      Log_Normal "Calling 'svn checkout'. This is going to take a lot of time."
      Quiet pushd $compileDir
      svn checkout $compileSubversion Subversion || Die "Error doing the svn checkout."
      Quiet popd
      Log_Normal "Checkout finished."
      checkedout=yes
   fi
   if ! trunk=`Get_Local_Trunk` || [ ! "$checkedout" ]
   then Die "Could not find a valid svn trunk."
   fi
fi

existingprogram=`ls "$trunk" 2> /dev/null | grep -i "^$program$"`
if [ ! "$existingprogram" ]
then
   Log_Normal "Trying to checkout $program..."
   Quiet pushd $trunk
   svn checkout "$compileSubversion/trunk/$program"
   Quiet popd
   checkedout=yes
fi

existingprogram=`ls "$trunk" 2> /dev/null | grep -i "^$program$"`
if [ "$existingprogram" ]
then
   [ `echo "$existingprogram" | wc -l` -eq 1 ] || Die "More than one capitalization for $program found in trunk. Please check."

   if [ "$existingprogram" != "$program" ]
   then
      Log_Terse "Capitalization differs in trunk. Changing recipe directory."
      mv "$unpackdir/$program" "$unpackdir/$existingprogram"
      program="$existingprogram"
   fi

   if [ ! "$checkedout" ]
   then
      Log_Normal "Updating local subversion copy..."
      svn update "$trunk/$program"
   fi

   latestexisting=$(GuessLatest $(ls "$trunk/$program"))

   unpackrecipedir="$unpackdir/$program/$version"
   oldrecipedir="$trunk/$program/$latestexisting"
   newrecipedir="$trunk/$program/$version"

   # Test cases that may require the dev's attention

   if [ $latestexisting = $version ]
   then
      diff -Naur --exclude=".svn" "$oldrecipedir" "$unpackrecipedir" >& /dev/null
      if [ $? = 0 ]
      then
         Log_Terse "Version in trunk matches exactly with the given recipe"
         exit 0
      fi
      Log_Terse "Latest version in trunk is already $version."
      Ask_Continue "Will display differences."
      diff -Naur --exclude=".svn" "$oldrecipedir" "$unpackrecipedir" | Color_Output diff
      Ask_Continue "Proceed and overwrite with given recipe?"
   elif [ $(GuessLatest $latestexisting $version) != $version ]
   then
      Ask_Continue "Latest version in trunk ($latestexisting) seems more recent than recipe ($version). Add $version to trunk anyway?"
   fi
   
   # Create newrecipedir if it's a new version

   if [ "$oldrecipedir" != "$newrecipedir" -a ! -d "$newrecipedir" ]
   then
      svn copy "$oldrecipedir" "$newrecipedir" || Die "Failed preparing new version in trunk. Please check."
   fi

   # Update newrecipedir to match contents of unpackrecipedir:

   ( cd "$newrecipedir"; find | tac | grep -v "\.svn" ) | while read entry
   do
      if [ ! -e "$unpackrecipedir/$entry" ]
      then
         svn remove "$newrecipedir/$entry"
      fi
   done | sort -u
   
   cp -af "$unpackrecipedir"/* "$newrecipedir"
   
   Subversion_Status_Match "?" "$newrecipedir" | while read entry
   do
      svn add "$entry"
   done

   if [ $latestexisting != $version ] && Ask "View differences in new version?"
   then Subversion_Diff "$newrecipedir"
   fi

   # Exhibit a status summary for copy-n-paste convenience
   Log_Normal "Summary of differences:"
   Subversion_Status "$newrecipedir"
else
   Log_Terse "No existing versions for $program were found."
   Ask_Continue "Add new program $program to the recipes trunk?"
   cp -af "$unpackdir/$program" "$trunk"
   svn add "$trunk/$program"
   if Ask "View contents of new entry in trunk?"
   then Subversion_Diff "$trunk/$program"
   fi
   # Exhibit a status summary for copy-n-paste convenience
   Log_Normal "Summary of addition:"
   Subversion_Status "$trunk/$program"
fi
